name: Manual Test Run

on:
  workflow_dispatch:
    inputs:
      video_choice:
        description: 'Choose video to test'
        required: true
        default: 'adam'
        type: choice
        options:
          - adam
          - angela
          - audrey
          - briann
          - jennifer
          - maddelyn
      chunk_size:
        description: 'Chunk size in seconds'
        required: false
        default: '120'
        type: string
      max_workers:
        description: 'Maximum workers'
        required: false
        default: '2'
        type: string
      test_type:
        description: 'Type of test'
        required: true
        default: 'single'
        type: choice
        options:
          - single
          - batch
          - performance

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: multimodal-transcription
  ECS_CLUSTER: multimodal-transcription-cluster
  ECS_TASK_DEFINITION: multimodal-transcription-manual-test
  S3_BUCKET: multimodal-transcription-videos-1761690600

jobs:
  manual-test:
    name: Manual Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set video path
      id: video-path
      run: |
        case "${{ github.event.inputs.video_choice }}" in
          "adam")
            echo "video-path=test-videos/Adam_2024-03-03_6_32_PM.mp4" >> $GITHUB_OUTPUT
            echo "video-name=Adam" >> $GITHUB_OUTPUT
            ;;
          "angela")
            echo "video-path=test-videos/Angela_2025-03-10_2_11_PM.mp4" >> $GITHUB_OUTPUT
            echo "video-name=Angela" >> $GITHUB_OUTPUT
            ;;
          "audrey")
            echo "video-path=test-videos/Audrey_2025-04-06_6_20_PM-2.mp4" >> $GITHUB_OUTPUT
            echo "video-name=Audrey" >> $GITHUB_OUTPUT
            ;;
          "briann")
            echo "video-path=test-videos/Briann_2025-02-04_2_52_PM_new.mp4" >> $GITHUB_OUTPUT
            echo "video-name=Briann" >> $GITHUB_OUTPUT
            ;;
          "jennifer")
            echo "video-path=test-videos/Jennifer_2025-05-01_9_48_PM-2.mp4" >> $GITHUB_OUTPUT
            echo "video-name=Jennifer" >> $GITHUB_OUTPUT
            ;;
          "maddelyn")
            echo "video-path=test-videos/Maddelyn_2025-04-10_7_04_PM-2.mp4" >> $GITHUB_OUTPUT
            echo "video-name=Maddelyn" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Set output prefix
      id: output-prefix
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        echo "output-prefix=manual-test-outputs/${{ steps.video-path.outputs.video-name }}-$TIMESTAMP" >> $GITHUB_OUTPUT

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: manual-test-${{ github.run_number }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image-uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create ECS cluster if it doesn't exist
      run: |
        aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} || \
        aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }}

    - name: Create CloudWatch log group
      run: |
        aws logs create-log-group --log-group-name "/ecs/${{ env.ECS_TASK_DEFINITION }}" || true

    - name: Create task definition
      run: |
        cat > task-definition.json << EOF
        {
          "family": "${{ env.ECS_TASK_DEFINITION }}",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "2048",
          "memory": "4096",
          "executionRoleArn": "arn:aws:iam::669655810547:role/ecsTaskExecutionRole",
          "containerDefinitions": [
            {
              "name": "multimodal-transcription",
              "image": "${{ steps.build-image.outputs.image-uri }}",
              "essential": true,
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/${{ env.ECS_TASK_DEFINITION }}",
                  "awslogs-region": "${{ env.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "environment": [
                {
                  "name": "PYTHONUNBUFFERED",
                  "value": "1"
                },
                {
                  "name": "AWS_DEFAULT_REGION",
                  "value": "${{ env.AWS_REGION }}"
                }
              ],
              "secrets": [
                {
                  "name": "GOOGLE_API_KEY",
                  "valueFrom": "arn:aws:secretsmanager:${{ env.AWS_REGION }}:669655810547:secret:google-api-key"
                }
              ],
              "command": [
                "python",
                "src/transcription_pipeline.py",
                "--input",
                "s3://${{ env.S3_BUCKET }}/${{ steps.video-path.outputs.video-path }}",
                "--output-dir",
                "s3://${{ env.S3_BUCKET }}/${{ steps.output-prefix.outputs.output-prefix }}",
                "--chunk-size",
                "${{ github.event.inputs.chunk_size }}",
                "--max-workers",
                "${{ github.event.inputs.max_workers }}",
                "--verbose"
              ]
            }
          ]
        }
        EOF

    - name: Register task definition
      run: |
        aws ecs register-task-definition --cli-input-json file://task-definition.json

    - name: Run ECS task
      run: |
        echo "🎬 Testing video: ${{ steps.video-path.outputs.video-name }}"
        echo "⚙️  Chunk size: ${{ github.event.inputs.chunk_size }}s"
        echo "👥 Max workers: ${{ github.event.inputs.max_workers }}"
        echo "📁 Output: s3://${{ env.S3_BUCKET }}/${{ steps.output-prefix.outputs.output-prefix }}/"
        
        # Get the latest task definition revision
        TASK_DEF_ARN=$(aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        # Run the task
        TASK_ARN=$(aws ecs run-task \
          --cluster ${{ env.ECS_CLUSTER }} \
          --task-definition $TASK_DEF_ARN \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-9b7957d7,subnet-e74bc28c,subnet-8135f2fc],securityGroups=[sg-0b638085b666a013f],assignPublicIp=ENABLED}" \
          --query 'tasks[0].taskArn' \
          --output text)
        
        echo "🚀 Task started: $TASK_ARN"
        
        # Wait for task to complete
        echo "⏳ Waiting for task to complete..."
        aws ecs wait tasks-stopped --cluster ${{ env.ECS_CLUSTER }} --tasks $TASK_ARN
        
        # Get task status
        TASK_STATUS=$(aws ecs describe-tasks \
          --cluster ${{ env.ECS_CLUSTER }} \
          --tasks $TASK_ARN \
          --query 'tasks[0].lastStatus' \
          --output text)
        
        EXIT_CODE=$(aws ecs describe-tasks \
          --cluster ${{ env.ECS_CLUSTER }} \
          --tasks $TASK_ARN \
          --query 'tasks[0].containers[0].exitCode' \
          --output text)
        
        if [ "$TASK_STATUS" = "STOPPED" ] && [ "$EXIT_CODE" = "0" ]; then
          echo "✅ Task completed successfully!"
        else
          echo "❌ Task failed with status: $TASK_STATUS, exit code: $EXIT_CODE"
          
          # Get logs for debugging
          echo "📋 Getting task logs..."
          aws logs get-log-events \
            --log-group-name "/ecs/${{ env.ECS_TASK_DEFINITION }}" \
            --log-stream-name "ecs/multimodal-transcription/$TASK_ARN" \
            --start-from-head \
            --query 'events[*].message' \
            --output text | tail -20 || echo "Could not retrieve logs"
          
          exit 1
        fi

    - name: List S3 output files
      run: |
        echo "📋 S3 Output files:"
        aws s3 ls "s3://${{ env.S3_BUCKET }}/${{ steps.output-prefix.outputs.output-prefix }}/" --recursive || echo "No files found"
        
        echo ""
        echo "🔗 View results in S3:"
        echo "https://s3.console.aws.amazon.com/s3/buckets/${{ env.S3_BUCKET }}/${{ steps.output-prefix.outputs.output-prefix }}/"

    - name: Performance summary
      if: github.event.inputs.test_type == 'performance'
      run: |
        echo "📊 Performance Test Summary:"
        echo "Video: ${{ steps.video-path.outputs.video-name }}"
        echo "Chunk size: ${{ github.event.inputs.chunk_size }}s"
        echo "Workers: ${{ github.event.inputs.max_workers }}"
        echo "Output: s3://${{ env.S3_BUCKET }}/${{ steps.output-prefix.outputs.output-prefix }}/"
