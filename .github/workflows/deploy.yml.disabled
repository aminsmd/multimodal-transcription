name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_REGION: us-east-2
  ECS_CLUSTER: multimodal-transcription-cluster
  ECS_SERVICE: multimodal-transcription-service
  ECS_TASK_DEFINITION: multimodal-transcription-task
  
  # Network Configuration
  VPC_ID: vpc-f2452499
  SUBNET_IDS: subnet-9b7957d7,subnet-e74bc28c,subnet-8135f2fc
  SECURITY_GROUP_ID: sg-0b638085b666a013f

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Removed cache settings to avoid buildx driver issues

      - name: Create ECS cluster if it doesn't exist
        run: |
          aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} || \
          aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }}

      - name: Register ECS task definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://ecs-task-definition.json

      - name: Deploy to ECS
        run: |
          # Get the latest task definition revision
          TASK_DEF_ARN=$(aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          # Update the service with the new task definition
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition $TASK_DEF_ARN \
            --desired-count 0 || \
          aws ecs create-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --task-definition $TASK_DEF_ARN \
            --desired-count 0 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ env.SUBNET_IDS }}],securityGroups=[${{ env.SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}"

      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}

      - name: Show deployment status
        run: |
          echo "Deployment completed successfully!"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}"
          echo "ECS Cluster: ${{ env.ECS_CLUSTER }}"
          echo "ECS Service: ${{ env.ECS_SERVICE }}"
