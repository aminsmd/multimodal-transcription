name: ECS Batch Processing Deployment

on:
  workflow_dispatch:
    inputs:
      max_videos:
        description: 'Maximum videos to process per run'
        required: false
        default: '1'
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
  push:
    branches: [ main ]
    paths:
      - 'src/batch_processor.py'
      - 'src/database/**'
      - 'Dockerfile'
      - 'docker-compose-batch.yml'

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: multimodal-transcription
  ECS_SERVICE: batch-transcription-service
  ECS_CLUSTER: multimodal-transcription-cluster
  ECS_TASK_DEFINITION: batch-transcription-task

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.build.outputs.tags }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image-tag=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: batch-transcription
        image: ${{ needs.build-and-push.outputs.image-tag }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Run batch processing task
      run: |
        # Create a one-time task to run batch processing
        aws ecs run-task \
          --cluster ${{ env.ECS_CLUSTER }} \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-12345],securityGroups=[sg-12345],assignPublicIp=ENABLED}" \
          --overrides '{
            "containerOverrides": [{
              "name": "batch-transcription",
              "command": [
                "python", "src/batch_processor.py",
                "--database", "/app/data/video_database.json",
                "--base-dir", "/app/outputs",
                "--data-dir", "/app/data",
                "--max-videos", "${{ github.event.inputs.max_videos || '1' }}",
                "--verbose"
              ],
              "environment": [
                {
                  "name": "GOOGLE_API_KEY",
                  "value": "${{ secrets.GOOGLE_API_KEY }}"
                }
              ]
            }]
          }'

  cleanup:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-to-ecs]
    if: always()

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Clean up old ECR images
      run: |
        # Keep only the last 10 images
        aws ecr list-images \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --filter tagStatus=TAGGED \
          --query 'imageIds[?imagePushedAt<`'$(date -d '30 days ago' --iso-8601)`'].imageDigest' \
          --output text | \
        xargs -r aws ecr batch-delete-image \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --image-ids imageDigest=
