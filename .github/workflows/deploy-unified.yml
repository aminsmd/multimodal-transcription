name: Unified Deploy Workflow

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      deploy_type:
        description: 'Type of deployment'
        required: true
        default: 'service'
        type: choice
        options:
          - service
          - batch
      max_videos:
        description: 'Maximum videos to process (batch only)'
        required: false
        default: '1'
        type: string

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: multimodal-transcription
  ECS_CLUSTER: multimodal-transcription-cluster
  ECS_SERVICE: multimodal-transcription-service
  ECS_BATCH_SERVICE: multimodal-transcription-batch-service
  ECS_TASK_DEFINITION: multimodal-transcription-task
  ECS_BATCH_TASK_DEFINITION: multimodal-transcription-batch-task
  
  # Network Configuration
  VPC_ID: vpc-f2452499
  SUBNET_IDS: subnet-9b7957d7,subnet-e74bc28c,subnet-8135f2fc
  SECURITY_GROUP_ID: sg-0b638085b666a013f

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
      image-tag: ${{ steps.build.outputs.image-tag }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image-uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-service:
    name: Deploy ECS Service
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event.inputs.deploy_type == 'service' || github.event.inputs.deploy_type == '' || github.event_name == 'push'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create ECS cluster if it doesn't exist
      run: |
        aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} || \
        aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }}

    - name: Download and update task definition
      run: |
        # Download the current task definition
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json || \
        echo '{"family":"multimodal-transcription-task","networkMode":"awsvpc","requiresCompatibilities":["FARGATE"],"cpu":"1024","memory":"2048","executionRoleArn":"arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/ecsTaskExecutionRole","containerDefinitions":[{"name":"multimodal-transcription","image":"","essential":true,"logConfiguration":{"logDriver":"awslogs","options":{"awslogs-group":"/ecs/multimodal-transcription","awslogs-region":"us-east-2","awslogs-stream-prefix":"ecs"}}}]}' > task-definition.json
        
        # Update the image URI
        jq --arg image "${{ needs.build-and-push.outputs.image-uri }}" \
           '.containerDefinitions[0].image = $image' \
           task-definition.json > task-definition-updated.json

    - name: Register new task definition
      run: |
        aws ecs register-task-definition \
          --cli-input-json file://task-definition-updated.json

    - name: Deploy to ECS
      run: |
        # Get the latest task definition revision
        TASK_DEF_ARN=$(aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        # Update or create the service
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition $TASK_DEF_ARN \
          --desired-count 1 \
          --network-configuration "awsvpcConfiguration={subnets=[${{ env.SUBNET_IDS }}],securityGroups=[${{ env.SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}" || \
        aws ecs create-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service-name ${{ env.ECS_SERVICE }} \
          --task-definition $TASK_DEF_ARN \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ env.SUBNET_IDS }}],securityGroups=[${{ env.SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}"

    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}

  deploy-batch:
    name: Deploy Batch Processing
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event.inputs.deploy_type == 'batch'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create ECS cluster if it doesn't exist
      run: |
        aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} || \
        aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }}

    - name: Download and update batch task definition
      run: |
        # Download the current task definition
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_BATCH_TASK_DEFINITION }} \
          --query taskDefinition > batch-task-definition.json || \
        echo '{"family":"multimodal-transcription-batch-task","networkMode":"awsvpc","requiresCompatibilities":["FARGATE"],"cpu":"2048","memory":"4096","executionRoleArn":"arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/ecsTaskExecutionRole","containerDefinitions":[{"name":"batch-transcription","image":"","essential":true,"logConfiguration":{"logDriver":"awslogs","options":{"awslogs-group":"/ecs/batch-transcription","awslogs-region":"us-east-2","awslogs-stream-prefix":"ecs"}},"command":["python","src/batch_processor.py","--database","/app/data/video_database.json","--base-dir","/app/outputs","--data-dir","/app/data","--max-videos","${{ github.event.inputs.max_videos || '1' }}","--verbose"]}]}' > batch-task-definition.json
        
        # Update the image URI
        jq --arg image "${{ needs.build-and-push.outputs.image-uri }}" \
           '.containerDefinitions[0].image = $image' \
           batch-task-definition.json > batch-task-definition-updated.json

    - name: Register new batch task definition
      run: |
        aws ecs register-task-definition \
          --cli-input-json file://batch-task-definition-updated.json

    - name: Run batch processing task
      run: |
        # Create a one-time task to run batch processing
        aws ecs run-task \
          --cluster ${{ env.ECS_CLUSTER }} \
          --task-definition ${{ env.ECS_BATCH_TASK_DEFINITION }} \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ env.SUBNET_IDS }}],securityGroups=[${{ env.SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}" \
          --overrides '{
            "containerOverrides": [{
              "name": "batch-transcription",
              "command": [
                "python", "src/batch_processor.py",
                "--database", "/app/data/video_database.json",
                "--base-dir", "/app/outputs",
                "--data-dir", "/app/data",
                "--max-videos", "${{ github.event.inputs.max_videos || '1' }}",
                "--verbose"
              ],
              "environment": [
                {
                  "name": "GOOGLE_API_KEY",
                  "value": "${{ secrets.GOOGLE_API_KEY }}"
                }
              ]
            }]
          }'

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always()

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Clean up old ECR images
      run: |
        # Keep only the last 10 images
        aws ecr list-images \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --filter tagStatus=TAGGED \
          --query 'imageIds[?imagePushedAt<`'$(date -d '30 days ago' --iso-8601)`'].imageDigest' \
          --output text | \
        xargs -r aws ecr batch-delete-image \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --image-ids imageDigest=

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-service, deploy-batch, cleanup]
    if: always()

    steps:
    - name: Notify Success
      if: needs.deploy-service.result == 'success' || needs.deploy-batch.result == 'success'
      run: |
        echo "✅ Deployment completed successfully!"
        echo "Image: ${{ needs.build-and-push.outputs.image-uri }}"
        echo "ECS Cluster: ${{ env.ECS_CLUSTER }}"
        echo "AWS Region: ${{ env.AWS_REGION }}"

    - name: Notify Failure
      if: needs.deploy-service.result == 'failure' || needs.deploy-batch.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        exit 1
